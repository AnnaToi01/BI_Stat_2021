geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 15))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(color=n_medals, size=n_medals))+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(color=n_medals, size=n_medals), shape = 21, alpha = 0.7
)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 20, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
1
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 25, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
shape = 21,
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 10))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_Team, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(Team),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_Team, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(n_part > 2500, as.character(Team),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df, aes(x=wt, y=mpg, group=cyl)) +
geom_point(aes(shape=cyl, color=cyl, size=cyl))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.1 | n_part > 1000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
#Testing for normal distribution
fem_gym <- df_ol %>%
filter(Sex %in% c("F"), Sport %in% c("Gymnastics"))
fem_gym
m_bask %>% df_ol %>%
filter(Sex %in% c("M"), Sport %in% c("Basketball"))
m_bask<- df_ol %>%
filter(Sex %in% c("M"), Sport %in% c("Basketball"))
#Testing for normal distribution
fem_gym <- df_ol %>%
filter(Sex %in% c("F"), Sport %in% c("Gymnastics"))
m_bask<- df_ol %>%
filter(Sex %in% c("M"), Sport %in% c("Basketball"))
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(colour = "Blue")+
ggtitle("Height distribution for female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 10)) +
theme_bw()
pm_bask <- ggplot(m_bask, aes(Diameter))+
geom_density(colour = "Black")+
ggtitle("Height distribution for male basketball players")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 10)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
pm_bask <- ggplot(m_bask, aes(Height))+
geom_density(colour = "Black")+
ggtitle("Height distribution for male basketball players")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 10)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(colour = "Blue")+
ggtitle("Height distribution for female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.1)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
pm_bask <- ggplot(m_bask, aes(Height))+
geom_density(colour = "Black")+
ggtitle("Height distribution for male basketball players")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.1)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
#Testing for normal distribution
fem_gym <- df_ol %>%
filter(Sex %in% c("F"), Sport %in% c("Gymnastics"))
m_bask<- df_ol %>%
filter(Sex %in% c("M"), Sport %in% c("Basketball"))
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(colour = "Blue")+
ggtitle(title = "Height distribution", subtitl = "For female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
pm_bask <- ggplot(m_bask, aes(Height))+
geom_density(colour = "Black")+
labs(title = "Height distribution", subtitle = "For male basketball players")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(colour = "Blue")+
ggtitle(title = "Height distribution", subtitl = "For female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(colour = "Blue")+
ggtitle(title = "Height distribution", subtitle = "For female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(colour = "Blue")+
labs(title = "Height distribution", subtitle = "For female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(fill = "Blue")+
labs(title = "Height distribution", subtitle = "For female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
pm_bask <- ggplot(m_bask, aes(Height))+
geom_density(fill = "Black")+
labs(title = "Height distribution", subtitle = "For male basketball players")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
pfem_gym <- ggplot(fem_gym, aes(Height))+
geom_density(color = "Blue", fill = "Blue")+
labs(title = "Height distribution", subtitle = "For female gymnasts")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
pm_bask <- ggplot(m_bask, aes(Height))+
geom_density(fill = "Black")+
labs(title = "Height distribution", subtitle = "For male basketball players")+
scale_x_continuous(name = "Height",
limits = c(120, 250)) +
scale_y_continuous(limits = c(0, 0.075)) +
theme_bw()
plot_grid(pfem_gym, pm_bask)
qqPlot(fem_gym$Height)
qqPlot(m_bask$Height)
qqPlot(fem_gym$Height)
#Shapiro test for normal distribution
shapiro.test(fem_gym$Height)
#Shapiro test for normal distribution
shapiro.test(fem_gym$Height)
#Shapiro test for normal distribution
nrows(fem_gym)
#Shapiro test for normal distribution
nrows(fem_gym)
#Shapiro test for normal distribution
nrow(fem_gym)
#t-test
t_gym_bask <- t.test(fem_gym$Height, m_bask$Height, alternative = "two.sided")
t_gym_bask <- tidy(t_age)[c("statistic", "p.value", "parameter", "method", "alternative")]
names(t_gym_bask) <- c("Statistic", "P Value", "Degrees of Freedom", "Method", "Alternative Hypothesis")
t_gym_bask
#t-test
t_gym_bask <- t.test(fem_gym$Height, m_bask$Height, alternative = "two.sided")
t_gym_bask
t_gym_bask <- tidy(t_age)[c("statistic", "p.value", "parameter", "method", "alternative")]
t_gym_bask <- tidy(t_gym_bask)[c("statistic", "p.value", "parameter", "method", "alternative")]
#t-test
t_gym_bask <- t.test(fem_gym$Height, m_bask$Height, alternative = "two.sided")
t_gym_bask <- tidy(t_gym_bask)[c("statistic", "p.value", "parameter", "method", "alternative")]
names(t_gym_bask) <- c("Statistic", "P Value", "Degrees of Freedom", "Method", "Alternative Hypothesis")
t_gym_bask
ggplot(df_ol, aes(Weight, Height))+
geom_point()+
geom_smooth()
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.5,vjust=-0.5)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.5,vjust=-0.7)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.7,vjust=-0.7)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(df_ol, aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth()
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height))+
geom_point(aes(color = Sex))+
geom_smooth()
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(method = 'Lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(aes(color = Sex), method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(color="black",
size=0.5,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, fill = Sex))+
geom_point()+
geom_smooth(color="black",
size=0.5,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(color="black",
size=0.5,
method = 'lm')+
facet_grid(~Sex)
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(color="black",
size=0.5,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(aes(group = Sex),
color="black",
size=0.5,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(color="black",
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point()+
geom_smooth(
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point(size = 0.1)+
geom_smooth(
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point(size = 0.1)+
geom_smooth(aes(shape = Sex),
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point(size = 0.1)+
geom_smooth(aes(linteype = Sex),
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height, color = Sex))+
geom_point(size = 0.1)+
geom_smooth(aes(linteype = Sex),
color = "black",
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height))+
geom_point(aes(color = Sex), size = 0.1)+
geom_smooth(aes(linetype=sex, color=sex),
color = "black",
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height))+
geom_point(aes(color = Sex), size = 0.1)+
geom_smooth(aes(linetype=Sex, color=Sex),
color = "black",
size=0.5,
se=T,
method = 'lm')
#Let's see... We know that Height and Weight are both normally distributed.
ggplot(subset(df_ol, complete.cases(Height, Weight)), aes(Weight, Height))+
geom_point(aes(color = Sex), size = 0.1)+
geom_smooth(aes(linetype=Sex, color=Sex),
color = "black",
size=0.5,
method = 'lm')
fem <- filter(df_ol, df_ol$Sex %in% c("F"))
m <- filter(df_ol, df_ol$Sex %in% c("M"))
c_m <- cor.test(m$Weight, m$Height)
c_fem <- cor.test(fem$Weight, fem$Height)
c_m <- cor.test(m$Weight, m$Height)
c_fem <- cor.test(fem$Weight, fem$Height)
c_m <- tidy(c3)[c("estimate", "statistic", "p.value",
"conf.low", "conf.high", "method", "alternative")]
names(c_m) <- c("Correlation coefficient estimate", "Statistic", "P value",
"Lower conf.int.", "Upper conf.int.", "Method", "Alternative Hypothesis")
c_m <- tidy(c_m)[c("estimate", "statistic", "p.value",
"conf.low", "conf.high", "method", "alternative")]
names(c_m) <- c("Correlation coefficient estimate", "Statistic", "P value",
"Lower conf.int.", "Upper conf.int.", "Method", "Alternative Hypothesis")
c_m <- cor.test(m$Weight, m$Height)
c_fem <- cor.test(fem$Weight, fem$Height)
c_m <- tidy(c_m)[c("estimate", "statistic", "p.value",
"conf.low", "conf.high", "method", "alternative")]
names(c_m) <- c("Correlation coefficient estimate", "Statistic", "P value",
"Lower conf.int.", "Upper conf.int.", "Method", "Alternative Hypothesis")
c_m
c_fem <- tidy(c_fem)[c("estimate", "statistic", "p.value",
"conf.low", "conf.high", "method", "alternative")]
names(c_fem) <- c("Correlation coefficient estimate", "Statistic", "P value",
"Lower conf.int.", "Upper conf.int.", "Method", "Alternative Hypothesis")
c_fem
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(0.3, 3))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(0.3, 2))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7, size=10)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7, size=1)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7, size=4)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7, size=3)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7, size=2)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_Team, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(n_part > 2500, as.character(Team),'')),hjust=0.5,vjust=-0.5, size = 2)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_Team, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(n_part > 2500, as.character(Team),'')),hjust=1,vjust=-0.5, size = 2)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_Team, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(n_part > 2500, as.character(Team),'')),hjust=0.5,vjust=-1, size = 2)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_Team, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(n_part > 2500, as.character(Team),'')),hjust=0.5,vjust=-1.2, size = 2)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-0.7, size=2)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
ggplot(df_fract_NOC, aes(x = n_part, y = fraction_med_part, group =n_medals))+
geom_point(aes(fill=n_medals, size=n_medals), shape = 21, alpha = 0.7)+
geom_text(aes(label=ifelse(fraction_med_part>0.2 | n_part > 2000, as.character(NOC),'')),hjust=0.3,vjust=-1.2, size=2)+
scale_fill_viridis_c(guide = "legend") +
scale_size_continuous(range = c(1, 5))
if (!require(dplyr, character.only = TRUE)) {
install.packages(dplyr, dependencies = TRUE)
library(dplyr, character.only = TRUE)
}
if(!require(dplyr)){
install.packages("dplyt")
library(dplyr)
}
list.of.packages <- c("ggplot2", "dplyr", "ggExtra", "cowplot", "car", "broomExtra", "purr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(ggplot2)
library(ggExtra)
library(cowplot)
library(car)
library(broomExtra)
library(purrr)
packages <- c("ggplot2", "dplyr", "ggExtra", "cowplot", "car", "broomExtra", "purr")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
packages <- c("ggplot2", "dplyr", "ggExtra", "cowplot", "car", "broomExtra", "purrr")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
package.check(packages)
packages <- c("ggplot2", "dplyr", "ggExtra", "cowplot", "car", "broomExtra", "purrr")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
packages <- c("ggplot2", "dplyr", "ggExtra", "cowplot", "car", "broomExtra", "purrr", "bfp")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
